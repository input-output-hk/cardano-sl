{-# LANGUAGE QuasiQuotes #-}

-- | Command line options of cardano-analyzer.

module AnalyzerOptions
       ( Args (..)
       , getAnalyzerOptions
       ) where

import           Universum

import           Data.Version                 (showVersion)
import           NeatInterpolation            (text)
import           Options.Applicative          (Parser, auto, execParser, footerDoc,
                                               fullDesc, header, help, helper, info,
                                               infoOption, long, metavar, option,
                                               progDesc, short, strOption, value)
import           Text.PrettyPrint.ANSI.Leijen (Doc)

import           Paths_cardano_sl             (version)
import           Pos.Core.Configuration       (HasConfiguration, blkSecurityParam)
import           Pos.Core                     (BlockCount)

data Args = Args
    { files             :: ![FilePath]
    , txFile            :: !(Maybe FilePath)
    , confirmationParam :: !BlockCount
    }
  deriving Show

-- TODO: introduce subcommands (can be done if new commands appear)
argsParser :: HasConfiguration => Parser Args
argsParser = Args
    <$> many (strOption $
              long "file"
           <> metavar "FILEPATH"
           <> help "Path to JSON log to analyze.")
    <*> optional (strOption $
                  long "tx-file"
               <> metavar "FILEPATH"
               <> help "Path to JSON file generated by txSender.")
    <*> option auto (long "confirmation"
                  <> short 'k'
                  <> value blkSecurityParam
                  <> help "Amount of blocks needed for confirmation.")

getAnalyzerOptions :: HasConfiguration => IO Args
getAnalyzerOptions = execParser programInfo
  where
    programInfo = info (helper <*> versionOption <*> argsParser) $
        fullDesc <> progDesc "Analyze JSON log and store information in CSV file."
                 <> header "Cardano SL log analyzer."
                 <> footerDoc usageExample

    versionOption = infoOption
        ("cardano-analyzer-" <> showVersion version)
        (long "version" <> help "Show version.")

usageExample :: Maybe Doc
usageExample = (Just . fromString @Doc . toString @Text) [text|
Command example:

  stack exec -- cardano-analyzer --file node2.json|]
