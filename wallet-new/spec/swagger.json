{
    "swagger": "2.0",
    "host": "127.0.0.1:8090",
    "info": {
        "version": "2.0",
        "title": "Cardano Wallet API",
        "license": {
            "url": "http://mit.com",
            "name": "MIT"
        },
        "description": "This is the specification for the Cardano Wallet API, automatically generated\nas a [Swagger](https://swagger.io/) spec from the [Servant](http://haskell-servant.readthedocs.io/en/stable/) API\nof [Cardano](https://github.com/input-output-hk/cardano-sl).\n\n### Request format (all versions)\n\nIssuing requests against this API is conceptually not very different from any other web service out there. The API\nis versioned, meaning is possible to access different versions of the latter by changing the _version number_ in the URL.\n\nFor example, _omitting_ the version number of passing `v0` would call the version 0 of the API. Examples:\n\n```\n/api/version\n/api/v0/version\n```\n\nBoth URL above will return the same result. Compatibility between major versions is not _guaranteed_, i.e. the\nrequest & response formats might differ.\n\n### Response format (V1 onwards)\n\n**All GET requests of the API are paginated by default**. Whilst this can be a source of surprise, is\nthe best way of ensuring the performance of GET requests is not affected by the size of the data storage.\n\nVersion `V1` introduced a different way of requesting information to the API. In particular, GET requests\nwhich returns a _collection_ (i.e. typically a JSON array of resources) lists extra parameters which can be\nused to modify the shape of the response. In particular, those are:\n\n* `page`: (Default value: **1**).\n* `per_page`: (Default value: **10**)\n* `extended`: (Default value: `false`)\n* `Daedalus-Response-Format`: (Default value: `null`)\n\nFor a more accurate description, see the section `Parameters` of each GET request, but as a brief overview\nthe first two control how many results and which results to access in a paginated request. The other two\n(one to be passed as a query parameter, the other as an HTTP Header) controls the response format. By omitting\nboth, the \"naked\" collection will be returned. For example, requesting for a list of _Accounts_ might issue,\nin this case:\n\n``` json\n[\n    {\n        \"amount\": 10574016894293587,\n        \"addresses\": [\n            \"Un4ZpTvXtoKfUHjDCrusx7xrADRVPP11956y3BPMs6Mrgng4qbEQrjPn2dhLTDiqLtptbiGD5ZYc7FPq2iCVTuD9jnWz2KtaSdfWdU1huyKxd795\",\n            \"3qruzscJwnkDgVrhM7QEbBpsLTKgAfGSGoVkvN6frVXPxwsgjbpooVVvYBdmcUaLsLXNVVi1RrkSinxYiFSV1aH8X8FcP8MbzP1QFDKpicCkV78Z61tUKE3bFBASFJXNpmZ8vFkrY36a6WgyQh8VsXpqnvynLDZyFcURF9bhHWqrMBbmxMqWeYX8zcKGCR84BccQr1Bf7vu6xFL7xcdUZHqH55J3a7gGsHRG2XUjEfkF5WyHz6toRpAzzL4rRLL1K2ypckMUrQNeVdMN7ADhfufhqJQsrk\"\n        ],\n        \"name\": \"My account\",\n        \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"id\": \"123456\"\n    },\n    {\n        \"amount\": 18773007703513614,\n        \"addresses\": [\n            \"5oP9ib6ym3XbH2fmvNAm5dUyE7xFqQztrsN41xg7hbXQbmbQnYUgXXt2rFZUgLyYPd\"\n        ],\n        \"name\": \"My account\",\n        \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"id\": \"DEADBeef\"\n    }\n]\n```\n\nIn the second case, instead:\n\n``` json\n{\n    \"data\": [\n        {\n            \"amount\": 23759697234791994,\n            \"addresses\": [\n                \"Un4ZpTvXtoKN7YiPTJZgXcD8uywHboxG9r7ZQqCRnpvnFAq7Gx4gpUd5Wqti65ZXydvyrg8KVe2oWVXi5PiVosGoEWGZLseimCRBEM61DCbL5hqj\"\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"id\": \"DEADBeef\"\n        },\n        {\n            \"amount\": 39337990575634793,\n            \"addresses\": [\n                \"7J1MaQmKydNVxXeuuEk33yiWbfA9mjA3TSzxsLzVaPq7LzDsx11Wz9qBT738VcPE53sg9sREzDzdRD43AAByWX55rdvigsfAQW1nj7aysmFfmtb\",\n                \"2657WMsDfac6Yj1L8CzH6jr7Xqd82zKm91aYZL61Ft1TV44RtY8YQDgFtJtjoqe5W\"\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"id\": \"123456\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 46,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}\n```\n\n### Dealing with errors (V1 onwards)\n\nIn case a request cannot be served by the API, a non-2xx HTTP response will be issue, together with a\n[JSend-compliant](https://labs.omniti.com/labs/jsend) JSON Object describing the error in detail together\nwith a numeric error code which can be used by API consumers to implement proper error handling in their\napplication. For example, here's a typical error which might be issued:\n\n``` json\n{\n    \"diagnostic\": {},\n    \"message\": \"WalletNotFound\"\n}\n```\n"
    },
    "definitions": {
        "CPtxCondition": {
            "type": "string",
            "enum": [
                "CPtxCreating",
                "CPtxApplying",
                "CPtxInBlocks",
                "CPtxWontApply",
                "CPtxNotTracked"
            ]
        },
        "CUpdateInfo": {
            "required": [
                "cuiSoftwareVersion",
                "cuiBlockVesion",
                "cuiScriptVersion",
                "cuiImplicit",
                "cuiVotesFor",
                "cuiVotesAgainst",
                "cuiPositiveStake",
                "cuiNegativeStake"
            ],
            "type": "object",
            "properties": {
                "cuiNegativeStake": {
                    "$ref": "#/definitions/CCoin"
                },
                "cuiVotesFor": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cuiSoftwareVersion": {
                    "$ref": "#/definitions/SoftwareVersion"
                },
                "cuiImplicit": {
                    "type": "boolean"
                },
                "cuiVotesAgainst": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cuiPositiveStake": {
                    "$ref": "#/definitions/CCoin"
                },
                "cuiScriptVersion": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "cuiBlockVesion": {
                    "$ref": "#/definitions/BlockVersion"
                }
            }
        },
        "Wallet": {
            "example": {
                "balance": 361333354208714,
                "name": "My wallet",
                "id": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg"
            },
            "required": [
                "balance",
                "name",
                "id"
            ],
            "type": "object",
            "description": "A Wallet.",
            "properties": {
                "balance": {
                    "type": "number",
                    "readOnly": true
                },
                "name": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "CAccount": {
            "required": [
                "caId",
                "caMeta",
                "caAddresses",
                "caAmount"
            ],
            "type": "object",
            "properties": {
                "caAddresses": {
                    "items": {
                        "$ref": "#/definitions/CAddress"
                    },
                    "type": "array"
                },
                "caMeta": {
                    "$ref": "#/definitions/CAccountMeta"
                },
                "caId": {
                    "$ref": "#/definitions/CAccountId"
                },
                "caAmount": {
                    "$ref": "#/definitions/CCoin"
                }
            }
        },
        "CTxMeta": {
            "required": [
                "ctmDate"
            ],
            "type": "object",
            "properties": {
                "ctmDate": {
                    "type": "integer"
                }
            }
        },
        "ApiVersion": {
            "type": "string",
            "enum": [
                "ApiVersion0"
            ]
        },
        "Payment": {
            "example": {
                "sourceAccount": "[",
                "groupingPolicy": "OptimiseForSecurity",
                "destinations": [
                    {
                        "amount": 32634946131515590,
                        "address": "5oP9ib6ym3XdFXvmLXfUVZWw537vicy11ppa5bo8Ku9weByZAUaXWknjiA4dzK84Si"
                    },
                    {
                        "amount": 23455541578120684,
                        "address": "KjgoiXJS2cosYURpKV6iD3h74KkYZnShaoKftk6FmpQzkPzUUQVyPr3FPqK2Z7MPM1s3jhrCGhubFVsWCsgXCbvYp6UncLrcUd5B2Z2j9q82"
                    },
                    {
                        "amount": 18389682634121662,
                        "address": "5FCjkr138i9vJ5GwWGUm11T1Zn4X1BNWoRcHAioCVMUq4ZXLJU5BfTrYCPYAX8iZ4TkPnAehU7rwTKdfnBgRDQpq3LGWwCYcHz3HCdPJw5c"
                    }
                ],
                "sourceWallet": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg"
            },
            "required": [
                "sourceAccount",
                "groupingPolicy",
                "destinations",
                "sourceWallet"
            ],
            "type": "object",
            "description": "A transfer of `Coin`(s) from one source to one or more destinations.",
            "properties": {
                "sourceAccount": {
                    "type": "string"
                },
                "groupingPolicy": {
                    "type": "string"
                },
                "destinations": {
                    "items": {
                        "required": [
                            "amount",
                            "address"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "type": "number"
                            },
                            "address": {
                                "type": "string"
                            }
                        }
                    },
                    "type": "array"
                },
                "sourceWallet": {
                    "type": "string"
                }
            }
        },
        "CTxId": {
            "type": "string"
        },
        "NodeSettings": {
            "example": {
                "projectVersion": "2",
                "gitRevision": "0e1c9322a",
                "slotDuration": {
                    "quantity": 77,
                    "unit": "milliseconds"
                },
                "softwareInfo": {
                    "version": 0,
                    "applicationName": "1"
                }
            },
            "required": [
                "projectVersion",
                "gitRevision",
                "slotDuration",
                "softwareInfo"
            ],
            "type": "object",
            "description": "A collection of static settings for this wallet node.",
            "properties": {
                "projectVersion": {
                    "type": "string"
                },
                "gitRevision": {
                    "type": "string"
                },
                "slotDuration": {
                    "required": [
                        "quantity",
                        "unit"
                    ],
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "type": "string"
                        }
                    }
                },
                "softwareInfo": {
                    "required": [
                        "version",
                        "applicationName"
                    ],
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "number"
                        },
                        "applicationName": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "CAccountInit": {
            "required": [
                "caInitMeta",
                "caInitWId"
            ],
            "type": "object",
            "properties": {
                "caInitWId": {
                    "$ref": "#/definitions/CId"
                },
                "caInitMeta": {
                    "$ref": "#/definitions/CAccountMeta"
                }
            }
        },
        "CProfile": {
            "required": [
                "cpLocale"
            ],
            "type": "object",
            "properties": {
                "cpLocale": {
                    "type": "string"
                }
            }
        },
        "OneOf [Transaction] (ExtendedResponse [Transaction])": {
            "example": [
                {
                    "amount": 25820424046006543,
                    "inputs": [
                        {
                            "amount": 32003858608147755,
                            "address": "Ae2tdPwUPEZJnuHHU2MFFR1t9AmxvMTVEXZR8jiYN3siDbfngmCSx4cBGk6"
                        },
                        {
                            "amount": 39122173921310246,
                            "address": "2Wcg6zEnC1Vo4oJGEFHuhyu8DFzWf8XVRHBg2UjACrHRT6ee6zvccmttPDLa34vbUXVWNbGosEgAzzHWtiLYwWna5MMMDh97ez9agBy97wtZDb6wp8D8i8LNcfLWZMw4Xg7kLmRZhHJWbfd8aWCaBGt6SKmQY6WaxrWmNYJBG5cGkc8ygjtqY"
                        }
                    ],
                    "direction": "incoming",
                    "outputs": [
                        {
                            "amount": 44860519515251501,
                            "address": "DxiwK26gE3LC9ui1eHgDa39GAYb49NTAVXiLd3nWApv571tVeaDac89jjkvKzm9hygeRaM2eCk3tDXhQmUFEzgUxLPUc1kh74h4kgipG9pAUQ1jKSmT4hxBXoPTaTdBg8XZy7gVXioqhBWpsD2uSHdsPy1gDPVQzwcQjPZsci9Mm8MC2cRb9rNTFXP3pXq9p8oA8SWX2he1SpsH15osvWdMZAF21BQkjp9DYLLP"
                        },
                        {
                            "amount": 33921758618797403,
                            "address": "eMNXLAmamdhbZqLznEZ4eVGD4htgs5yBuecG97aPKwfM4QvYZ46fDQ5WVLLfNKxhyy2UXe8Ga6iMYeBAhhWbJqvTf8nzsujMVULp9LFBCEu43rVxBUDFNyKeXhtgp46yqpTFaNgg8fddtLyCpSERV9mVLfJ6sGKtsrKfttGmziQw5NBhnnVjEkzKPpGA7v18a8d6ECoEXTs7nmfQG2JUVK9zp7bkBucraNsqAPZPVEyhKZh3s4bn94P8ujAvvhtne62cS8CXZ74Hp1ssEDtE6R6tugBF"
                        }
                    ],
                    "confirmations": 2,
                    "id": "h}",
                    "type": "foreign"
                }
            ],
            "items": {
                "required": [
                    "amount",
                    "inputs",
                    "direction",
                    "outputs",
                    "confirmations",
                    "id",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number"
                    },
                    "inputs": {
                        "items": {
                            "required": [
                                "amount",
                                "address"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "type": "number"
                                },
                                "address": {
                                    "type": "string"
                                }
                            }
                        },
                        "type": "array"
                    },
                    "direction": {
                        "type": "string"
                    },
                    "outputs": {
                        "items": {
                            "required": [
                                "amount",
                                "address"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "type": "number"
                                },
                                "address": {
                                    "type": "string"
                                }
                            }
                        },
                        "type": "array"
                    },
                    "confirmations": {
                        "type": "number"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Transaction] or [Transaction] depending on whether or not the extended response format has been requested. While using the  API this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an <b>a</b> will be returned. Here's an example:<br><br><pre>[\n    {\n        \"amount\": 16574871362077004,\n        \"inputs\": [\n            {\n                \"amount\": 5012561879500490,\n                \"address\": \"37btjrVyb4KBRE7eEEcJburWtkU4mkZPJYabScdytbugxAdZVgQqRMx4MVgKA7jWxy58nkGjotSmniXf9BjTfcPXxo8vtAwntSNMVLzyPNhQsjqYVD\"\n            },\n            {\n                \"amount\": 13145498605296147,\n                \"address\": \"NBimUZYpm3GVtbUCoBhpodaQeNHRDWzuLy155f31wkd8sdaS1YZB6KXfuQLxPpL7ryG\"\n            },\n            {\n                \"amount\": 9421449954585108,\n                \"address\": \"NBimUZYpm3GUrqmW2xVrbszVeYvUMCq1UNebbWoyKck9wJJpizDHvqxjNYFGUjhwS2R\"\n            }\n        ],\n        \"direction\": \"outgoing\",\n        \"outputs\": [\n            {\n                \"amount\": 1334284366964500,\n                \"address\": \"NBimUZYpm3GEuQVbPESLLpUawax3zZey1EmTm7x6jkzWZUYsDxFfFPhEx1sd6B45vAw\"\n            },\n            {\n                \"amount\": 26632435084216427,\n                \"address\": \"2Tp1cYozcWTqJMGexiHSkPar9hP3QuBH1Jnn3JmFmGmB5LUiuYx3Ar1yQADZr1uaGK1bxML1Wg7YC9gq9jDRuwiuLePXi5SuDQktJby1kxhY1cnjN8qDEs8cig9pJRSegXfgHUddYgSgbmZ8tYAQeDZqJRFKW4npXEXrikjt7Sv7PWLHzqmkP4LLAq85vj9eEkJY6LqG3233EpsGBGA2A98gDbeUGSqBDXtpd4ZUQAWPu\"\n            },\n            {\n                \"amount\": 14504884420630507,\n                \"address\": \"Un4ZpTvXtoKkw2SwZn9oWBx94RqdNj6Tt2UvgoKcQGGFivoZavpsMZYN6txB5seL5NFyPMo6b7J3gWQZv7sHLsAhQosJKS4qRW6zDugZ4EdBzR6H\"\n            },\n            {\n                \"amount\": 35142054301558539,\n                \"address\": \"3qruzscJwnkGspjGWXKSCyBACJCXCqh3H3wHyFuxXzg1r97RGoVDBqtE2bgbbgzqrqsAxZhA7c1trZRhHtV5wEZ7yzDP9kr2qrQgshN55nuq6HcpQ9makrDJ2CAxksEXt5V4zJgLyBmWY4BpycXANbNydnXw4ZNLB1bqoApcRQfCzJXx2MyHUkvLwcR22XvzJiNTQrVPN5fRr9W9oJFBrKn5Hudk4JrU3kmXSNbDx8c6k852GSZe7uARiwpmxWpsFo3CQ2k2AJj1ZoLH4dqAx2hnHYYN1C\"\n            }\n        ],\n        \"confirmations\": 0,\n        \"id\": \"\\u0011\",\n        \"type\": \"foreign\"\n    },\n    {\n        \"amount\": 5487253052033782,\n        \"inputs\": [\n            {\n                \"amount\": 2750028793395044,\n                \"address\": \"AL91N9VXRTCtt1stXfTtX74Ji677k2Ay4mfXTdQKESScVf4Hq3RvuCbV9Eh5jgLiM4BZAsnkHAsSsujuuQqy1a2kQFvmEEHWDx8pwdBH8QRapwg4wnn\"\n            },\n            {\n                \"amount\": 43435865335078777,\n                \"address\": \"LDTseZq14n99gv44NRvK6G7gUTRvF5Pm4Hb3jAMnFQycGeN7YAo7N9hMwMkLd1QgmbwAKuSAhyf8kce8ZiSHCN1y9u3NbXPehshhbp9zAKZer4Y9jduyi3wbkf5dHa6i9p6n4ci6XgBapYiGXzM8CiwrM2552BWKDAsifnDWzattJhGYKi5qGarmaSQXnFTmyXZ4q2fiq7KXFd2kLEnERqmp4D3wZ8bxN7pbxXK9Hbt\"\n            },\n            {\n                \"amount\": 24116109030439910,\n                \"address\": \"2657WMsDfac79WyvE2tqb1bGGWnU9euc7NA51qv6etiHjXxQ2YX4oAub6pj8TdVnH\"\n            }\n        ],\n        \"direction\": \"outgoing\",\n        \"outputs\": [\n            {\n                \"amount\": 32003858608147755,\n                \"address\": \"Ae2tdPwUPEZJnuHHU2MFFR1t9AmxvMTVEXZR8jiYN3siDbfngmCSx4cBGk6\"\n            },\n            {\n                \"amount\": 39122173921310246,\n                \"address\": \"2Wcg6zEnC1Vo4oJGEFHuhyu8DFzWf8XVRHBg2UjACrHRT6ee6zvccmttPDLa34vbUXVWNbGosEgAzzHWtiLYwWna5MMMDh97ez9agBy97wtZDb6wp8D8i8LNcfLWZMw4Xg7kLmRZhHJWbfd8aWCaBGt6SKmQY6WaxrWmNYJBG5cGkc8ygjtqY\"\n            }\n        ],\n        \"confirmations\": 4,\n        \"id\": \"kC\",\n        \"type\": \"local\"\n    }\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        {\n            \"amount\": 31399702123918923,\n            \"inputs\": [\n                {\n                    \"amount\": 40966024299334005,\n                    \"address\": \"LDTseZq14n9M3J9T696PUipmJyJtDypDUpmZVijaku7p6TiGS5q6mjhekEd69ZrzaE4JXamrnB81zA9QPQfqmmcEXtWgugMoyCV5pAf43jfTWVzQ58PrtuJ6xXWfGDZ8Wavtv8gPm5wbT7RzjzR1yn9Py8T8Yfj1SXrJsZZ117EtMNBnGRPVe1P7xXVmusXXoxWRKN3NEWJ3qvwWQsotcUrBKFuuYXQ2xqmmzbutugF\"\n                },\n                {\n                    \"amount\": 34332109651192463,\n                    \"address\": \"NBimUZYpm3GYeknU5jP16xi2VgV82e5m8ME9jEqcqn8roEmVXSSpKr88cAaMLEa6pAi\"\n                },\n                {\n                    \"amount\": 18338021189232715,\n                    \"address\": \"NBimUZYpm3GLoN3JCqmBGKm5noPhGoTNsX1RAyd28efrZUzMhDJpy2iLqm5s6NfJkip\"\n                }\n            ],\n            \"direction\": \"incoming\",\n            \"outputs\": [\n                {\n                    \"amount\": 37765755838301214,\n                    \"address\": \"NBimUZYpm3FsF2zwV8agdFGSittgxe3mkVCFo4j4jBibwnA2AzYxtmJsqLfZZrkLbUh\"\n                },\n                {\n                    \"amount\": 24958883317782305,\n                    \"address\": \"jYTLseJK1m3LfnTMHyWkGmajQMJmQ4hMSCS93Ep3vomC5f9dKETEZGMAdiUE\"\n                },\n                {\n                    \"amount\": 25555482624522706,\n                    \"address\": \"dA2W35xz9skvQJHXpaXh6WQyuDcwoZ6GQM8yWbSBno5ccLLLuoLrS9gTYGuYKQXvosjA3WjsvnXnX5hbMdbkPo7my9yPReSvT6JECEoVEoSCAJ7oZCB9LdYZFE9yj66wjSgwWruRjtuGcqgKMeQHumBbXWojJLRW83NCigeC3zC1yYczfk2EUs44GYwkXmjHhYSWavj9PyYAkRdcWaP47WSicpvKc38zo1kZ6Qy18F5QWDEkZan3nWyZFKmU6i12ipNaVYnqsBkS7vG1cHKibek7js9ibYSh5pVmuxGC4Da1xfqKhXGHNj1McyFh4zE1bB4PNSUgzTJZn4qQmLjd\"\n                }\n            ],\n            \"confirmations\": 0,\n            \"id\": \"\",\n            \"type\": \"local\"\n        },\n        {\n            \"amount\": 33790694083517094,\n            \"inputs\": [\n                {\n                    \"amount\": 33752266613962695,\n                    \"address\": \"AL91N9VXRTCku6ENarVyvXsZDTsW7H7aCrjKo8zZZ4WuuuowykwR23hbcCPPHNnKhtfzjWWvnYgoXsSLE9XrCBxNSGGjJcAcDWjfhWScKZyRsGjy1tx\"\n                },\n                {\n                    \"amount\": 21495462453364980,\n                    \"address\": \"2Fc9FhbWKyhFvr38xV8yyUvTz85k5SciEEiih41bSrpQuGRzX4Q9kJjEds7AGN5z4dfjp8ttgHC8dYExAsmXfPLwcFmtMSULrMgGmQ71fbboDVcYgm9UegkWpNHyLzFR9tLYT9G9zHRno5EXrbwAivMhmSPHZpCKns7AxXEY9ZNAJKn7cHVwFzfhyEoWVxVjKgRkXRSa8baGcxW2fTfsbSoi5FdfSZrKxJKLXsdinzYzXroBYGPePKn5eikxhyUA6MnUDLssJwXTyEJPT5Jw2ASugWNcQzXJSDRpKTHqJdGWhBKhc4oooQawFrjrS1dPkt8v7mPv9NZdnN\"\n                },\n                {\n                    \"amount\": 31972172986904175,\n                    \"address\": \"dA2W35xz9sm7WPe3U9GMpPKZWF6AinpaWKDYM5ajXL4me7EBvf44dmUx7BUUJR9VQuPwQi79GFpfqut93hGDdzjzsjAZ23htRGhRKsDiXZcWmfxY6zdD2ssBJTH3DeZXCKMKMtLSL6WuQNrXY9S3R4BrpYsAP5yPuXiV1f71Ry72fTzAE8KWbu6ccvbLGj2gxcZyDbeCPBiKdHn25M2YWtJnRyGJ7F6q7Hwbi3n6P69LLcpkMQfb7797yuxk4VgYdKWxJmqZadTxpAiFSTbhsmGxJCMTvSzHAv8edRrELCian38qUDq65aANTDV14wJ1bqhkKYFGKBHTvx5dv8za\"\n                }\n            ],\n            \"direction\": \"outgoing\",\n            \"outputs\": [\n                {\n                    \"amount\": 5822102536916018,\n                    \"address\": \"jYTLseJK1m314VPM2NpFL3ZwhfxxL1DMwzaDBLhHE4RSFCKMTsQJVzymnxY7\"\n                },\n                {\n                    \"amount\": 42779166564495783,\n                    \"address\": \"42wmHXYSz61FEvz8P1wZ2TNmWdGnYKSQu2u1ANhQDQxDRP9ZAvW2q6X2ZmFyfAa7dSjdq9wiAgQku2imL4t1d8FAuiuZv6Rbxwdfr9KzhJ3FESoJ6CTgbJR2gRMb56QiPK7nsYA1hM8Aj8WXydrEg1Gp3XXxPoX8xMZVjnVjhyj3hE\"\n                }\n            ],\n            \"confirmations\": 4,\n            \"id\": \"\\u0017Ço\",\n            \"type\": \"foreign\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 46,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}</pre>"
        },
        "OneOf [Address] (ExtendedResponse [Address])": {
            "example": [
                "FHnt4NL7yPXxrMRzij8zCUMaALwCPE16gYJhSKSNSvW2drR6agf8b42u89VQdHf"
            ],
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Address] or [Address] depending on whether or not the extended response format has been requested. While using the  API this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an <b>a</b> will be returned. Here's an example:<br><br><pre>[\n    \"7fiTbReGezWNTftLYdM17Yt5auKDTze7NAUgp2k2TEMqHTQKGEUQKdf3ZGCKBcsPd2FdE9NCt37JfP5yJewLYg2uyPAiUTjZcNWV4uLQTcJHXXVxHDxspTSLQEeYZsDEZmuHZJ5zKkPeFdhBzJuxkhQTbby18WVfc31tmhqZZELzY2uvPcvqBJ\",\n    \"2Wcg6zEnC1Vq7xSayKsKyxgqn6KPKpMR5H6ECvz4hNGBksfQWQMQo9F7CvdDBiD5Lv2fwDQZubD4iMuKPb79Bc8VumebkMsAEe7TjhRQjrAnmdFf3zcnzaPshbbJ4bXrM5JqLKbrZsqsVF7t4D8VKyKTox475BNyQ5mMgRDKn1k9kg5membfZ\"\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        \"NBimUZYpm3GQsrBe6GVRhS7vMEZbTdzKDkJhJwNGr9546TJ6CneS76DXZnrREd6bXud\",\n        \"xNk66s8wK4mEKqh2Z5X1bpswvWp4iKKFzSAKJFNujhzXbPn3XuDzjmNYJ7AvKwHMsajVrB4WDDgc2N1k1qCSKgNkkfcGbGT7t9y4goKjKCSvdN2PaFQQsSJVPDaevPzpZ248zVtiE1wpTjMCeoLdjsv3MY5k2bZWp6RCnopkCvRwuxKBvBN5SPqASD7mGhyfaERU4cYHtJLWbhsRfSXRTAPYx11SEWeTiCWCLBwSGc8qjYDexMTVkYCpvA51UjhCeT3ozYac5dHZzWc9p8XXPwBu1vcwFfKG\"\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 46,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}</pre>"
        },
        "FilePath": {
            "example": "keys/1.key",
            "type": "string",
            "description": "Path to file.\n Note that it is represented as JSON-string, one may need to properly escape content. For instance:\n curl ... -X \"\\\\\"1.key\"\\\\\".\nAlso, when on Windows, don't forget to double-escape  backslashes, e.g.  \"C:\\\\\\\\\\\\\\\\keys\\\\\\\\1.key\""
        },
        "CWalletAssurance": {
            "type": "string",
            "enum": [
                "CWAStrict",
                "CWANormal"
            ]
        },
        "BackupPhrase": {
            "required": [
                "bpToList"
            ],
            "type": "object",
            "properties": {
                "bpToList": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "BlockVersion": {
            "required": [
                "bvMajor",
                "bvMinor",
                "bvAlt"
            ],
            "type": "object",
            "properties": {
                "bvAlt": {
                    "maximum": 255,
                    "minimum": 0,
                    "type": "integer"
                },
                "bvMajor": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "bvMinor": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "Address": {
            "example": "NBimUZYpm3Fghc938FCyLqookUReTpSMSePrnXaHce6cVsLXWKnmwATymbSRg6mc6v9",
            "type": "string",
            "description": "An Address."
        },
        "CWalletInit": {
            "required": [
                "cwInitMeta",
                "cwBackupPhrase"
            ],
            "type": "object",
            "properties": {
                "cwBackupPhrase": {
                    "$ref": "#/definitions/BackupPhrase"
                },
                "cwInitMeta": {
                    "$ref": "#/definitions/CWalletMeta"
                }
            }
        },
        "WalletUpdate": {
            "example": {
                "assuranceLevel": "normal",
                "name": "My Wallet"
            },
            "required": [
                "assuranceLevel",
                "name"
            ],
            "type": "object",
            "description": "A type represending an update for an existing Wallet.",
            "properties": {
                "assuranceLevel": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "InputSelectionPolicy": {
            "type": "string",
            "enum": [
                "OptimizeForSecurity",
                "OptimizeForSize"
            ]
        },
        "CWalletMeta": {
            "required": [
                "cwName",
                "cwAssurance",
                "cwUnit"
            ],
            "type": "object",
            "properties": {
                "cwUnit": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cwName": {
                    "type": "string"
                },
                "cwAssurance": {
                    "$ref": "#/definitions/CWalletAssurance"
                }
            }
        },
        "CWallet": {
            "required": [
                "cwId",
                "cwMeta",
                "cwAccountsNumber",
                "cwAmount",
                "cwHasPassphrase",
                "cwPassphraseLU"
            ],
            "type": "object",
            "properties": {
                "cwAmount": {
                    "$ref": "#/definitions/CCoin"
                },
                "cwHasPassphrase": {
                    "type": "boolean"
                },
                "cwAccountsNumber": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cwPassphraseLU": {
                    "type": "integer"
                },
                "cwMeta": {
                    "$ref": "#/definitions/CWalletMeta"
                },
                "cwId": {
                    "$ref": "#/definitions/CId"
                }
            }
        },
        "Transaction": {
            "example": {
                "amount": 7328081618979461,
                "inputs": [
                    {
                        "amount": 5984331314169693,
                        "address": "FHnt4NL7yPY8YQvzxKhvgJ8RGDySur5gf34RRH5vo7hJkuJxGVCejsUL2X9MAP9"
                    },
                    {
                        "amount": 22018044474388589,
                        "address": "NBimUZYpm3Fz5BH5TqVHsYV3SHjoGJYc3Zmh5yJ1yjRg4vWXa2ax3P4ToLjPhieZSM5"
                    }
                ],
                "direction": "outgoing",
                "outputs": [
                    {
                        "amount": 27889372662178400,
                        "address": "7J1MaQmKydNdKZ8ASMptqTpSiq6k8QwjD5w8hsnMF6iGQSFLZNbjgVjDhKtAa2vWYNCXvRixXTeuxKAfSHUBcjoieTUHcDaFPMgUtnhVnwk2rbz"
                    },
                    {
                        "amount": 33829516096667581,
                        "address": "2cWKMJemoBamMBMBYJWe5aQR3xitBLbjVbt4yxQUWUWC8KGGHvYF8BfUQwmAs5je5fSii"
                    }
                ],
                "confirmations": 4,
                "id": "\u0018À",
                "type": "local"
            },
            "required": [
                "amount",
                "inputs",
                "direction",
                "outputs",
                "confirmations",
                "id",
                "type"
            ],
            "type": "object",
            "description": "A Wallet Transaction.",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "inputs": {
                    "items": {
                        "required": [
                            "amount",
                            "address"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "type": "number"
                            },
                            "address": {
                                "type": "string"
                            }
                        }
                    },
                    "type": "array"
                },
                "direction": {
                    "type": "string"
                },
                "outputs": {
                    "items": {
                        "required": [
                            "amount",
                            "address"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "type": "number"
                            },
                            "address": {
                                "type": "string"
                            }
                        }
                    },
                    "type": "array"
                },
                "confirmations": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "WalletStateSnapshot": {
            "type": "string"
        },
        "CAccountMeta": {
            "required": [
                "caName"
            ],
            "type": "object",
            "properties": {
                "caName": {
                    "type": "string"
                }
            }
        },
        "CAccountId": {
            "type": "string"
        },
        "CTx": {
            "required": [
                "ctId",
                "ctAmount",
                "ctConfirmations",
                "ctMeta",
                "ctInputs",
                "ctOutputs",
                "ctIsLocal",
                "ctIsOutgoing",
                "ctCondition"
            ],
            "type": "object",
            "properties": {
                "ctId": {
                    "$ref": "#/definitions/CTxId"
                },
                "ctMeta": {
                    "$ref": "#/definitions/CTxMeta"
                },
                "ctIsOutgoing": {
                    "type": "boolean"
                },
                "ctCondition": {
                    "$ref": "#/definitions/CPtxCondition"
                },
                "ctInputs": {
                    "items": {
                        "minItems": 2,
                        "items": [
                            {
                                "$ref": "#/definitions/CId"
                            },
                            {
                                "$ref": "#/definitions/CCoin"
                            }
                        ],
                        "maxItems": 2,
                        "type": "array"
                    },
                    "type": "array"
                },
                "ctIsLocal": {
                    "type": "boolean"
                },
                "ctConfirmations": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                },
                "ctAmount": {
                    "$ref": "#/definitions/CCoin"
                },
                "ctOutputs": {
                    "items": {
                        "minItems": 2,
                        "items": [
                            {
                                "$ref": "#/definitions/CId"
                            },
                            {
                                "$ref": "#/definitions/CCoin"
                            }
                        ],
                        "maxItems": 2,
                        "type": "array"
                    },
                    "type": "array"
                }
            }
        },
        "ClientInfo": {
            "required": [
                "ciApiVersion",
                "ciSoftwareVersion",
                "ciCabalVersion",
                "ciGitRevision"
            ],
            "type": "object",
            "properties": {
                "ciSoftwareVersion": {
                    "$ref": "#/definitions/SoftwareVersion"
                },
                "ciCabalVersion": {
                    "$ref": "#/definitions/Version"
                },
                "ciApiVersion": {
                    "$ref": "#/definitions/ApiVersion"
                },
                "ciGitRevision": {
                    "type": "string"
                }
            }
        },
        "EstimatedFees": {
            "example": {
                "estimatedAmount": 25132995790248024
            },
            "required": [
                "estimatedAmount"
            ],
            "type": "object",
            "description": "Estimated fees for a `Payment`.",
            "properties": {
                "estimatedAmount": {
                    "type": "number"
                }
            }
        },
        "CInitialized": {
            "required": [
                "cTotalTime",
                "cPreInit"
            ],
            "type": "object",
            "properties": {
                "cTotalTime": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                },
                "cPreInit": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "BlockCount": {
            "required": [
                "getBlockCount"
            ],
            "type": "object",
            "properties": {
                "getBlockCount": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "Version": {
            "required": [
                "versionBranch",
                "versionTags"
            ],
            "type": "object",
            "properties": {
                "versionTags": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "versionBranch": {
                    "items": {
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808,
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "CWalletRedeem": {
            "required": [
                "crWalletId",
                "crSeed"
            ],
            "type": "object",
            "properties": {
                "crWalletId": {
                    "$ref": "#/definitions/CAccountId"
                },
                "crSeed": {
                    "type": "string"
                }
            }
        },
        "SyncProgress": {
            "required": [
                "_spLocalCD",
                "_spPeers"
            ],
            "type": "object",
            "properties": {
                "_spPeers": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                },
                "_spNetworkCD": {
                    "$ref": "#/definitions/ChainDifficulty"
                },
                "_spLocalCD": {
                    "$ref": "#/definitions/ChainDifficulty"
                }
            }
        },
        "CAddress": {
            "required": [
                "cadId",
                "cadAmount",
                "cadIsUsed",
                "cadIsChange"
            ],
            "type": "object",
            "properties": {
                "cadId": {
                    "$ref": "#/definitions/CId"
                },
                "cadIsUsed": {
                    "type": "boolean"
                },
                "cadIsChange": {
                    "type": "boolean"
                },
                "cadAmount": {
                    "$ref": "#/definitions/CCoin"
                }
            }
        },
        "ApplicationName": {
            "required": [
                "getApplicationName"
            ],
            "type": "object",
            "properties": {
                "getApplicationName": {
                    "type": "string"
                }
            }
        },
        "SoftwareVersion": {
            "required": [
                "svAppName",
                "svNumber"
            ],
            "type": "object",
            "properties": {
                "svAppName": {
                    "$ref": "#/definitions/ApplicationName"
                },
                "svNumber": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "CPaperVendWalletRedeem": {
            "required": [
                "pvWalletId",
                "pvSeed",
                "pvBackupPhrase"
            ],
            "type": "object",
            "properties": {
                "pvBackupPhrase": {
                    "$ref": "#/definitions/BackupPhrase"
                },
                "pvSeed": {
                    "type": "string"
                },
                "pvWalletId": {
                    "$ref": "#/definitions/CAccountId"
                }
            }
        },
        "OneOf [Wallet] (ExtendedResponse [Wallet])": {
            "example": [
                {
                    "balance": 24471984623077811,
                    "name": "My wallet",
                    "id": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg"
                }
            ],
            "items": {
                "required": [
                    "balance",
                    "name",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "balance": {
                        "type": "number"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Wallet] or [Wallet] depending on whether or not the extended response format has been requested. While using the  API this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an <b>a</b> will be returned. Here's an example:<br><br><pre>[\n    {\n        \"balance\": 36547889394682337,\n        \"name\": \"My wallet\",\n        \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\"\n    },\n    {\n        \"balance\": 17970494008295748,\n        \"name\": \"My wallet\",\n        \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\"\n    }\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        {\n            \"balance\": 30779743811174597,\n            \"name\": \"My wallet\",\n            \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\"\n        },\n        {\n            \"balance\": 5522692044222880,\n            \"name\": \"My wallet\",\n            \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 46,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}</pre>"
        },
        "CCoin": {
            "required": [
                "getCCoin"
            ],
            "type": "object",
            "properties": {
                "getCCoin": {
                    "type": "string"
                }
            }
        },
        "NewWallet": {
            "example": {
                "backupPhrase": [
                    "entry",
                    "certain",
                    "tourist",
                    "palm",
                    "palm",
                    "rabbit",
                    "worry",
                    "swamp",
                    "plastic",
                    "night",
                    "tourist",
                    "mean "
                ],
                "assuranceLevel": "normal",
                "name": "My Wallet",
                "spendingPassword": null
            },
            "required": [
                "backupPhrase",
                "assuranceLevel",
                "name",
                "spendingPassword"
            ],
            "type": "object",
            "description": "A type represending an request for creating a(n) Wallet.",
            "properties": {
                "backupPhrase": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "assuranceLevel": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "spendingPassword": {
                    "type": "null"
                }
            }
        },
        "PasswordUpdate": {
            "example": {
                "old": "<passphrase>",
                "new": "<passphrase>"
            },
            "required": [
                "old",
                "new"
            ],
            "type": "object",
            "description": "A PasswordUpdate incapsulate a request for changing a Wallet's password.",
            "properties": {
                "old": {
                    "type": "string"
                },
                "new": {
                    "type": "string"
                }
            }
        },
        "ChainDifficulty": {
            "required": [
                "getChainDifficulty"
            ],
            "type": "object",
            "properties": {
                "getChainDifficulty": {
                    "$ref": "#/definitions/BlockCount"
                }
            }
        },
        "CId": {
            "type": "string"
        },
        "NodeInfo": {
            "example": {
                "blockchainHeight": {
                    "quantity": 1686551422064315977,
                    "unit": "blocks"
                },
                "localTimeDifference": {
                    "quantity": 1.7174679558469000649e19,
                    "unit": "microseconds"
                },
                "syncProgress": {
                    "quantity": 77,
                    "unit": "percent"
                },
                "localBlockchainHeight": {
                    "quantity": 1.4664872184249792035e19,
                    "unit": "blocks"
                }
            },
            "required": [
                "blockchainHeight",
                "localTimeDifference",
                "syncProgress",
                "localBlockchainHeight"
            ],
            "type": "object",
            "description": "A collection of dynamic information for this wallet node.",
            "properties": {
                "blockchainHeight": {
                    "required": [
                        "quantity",
                        "unit"
                    ],
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "type": "string"
                        }
                    }
                },
                "localTimeDifference": {
                    "required": [
                        "quantity",
                        "unit"
                    ],
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "type": "string"
                        }
                    }
                },
                "syncProgress": {
                    "required": [
                        "quantity",
                        "unit"
                    ],
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "type": "string"
                        }
                    }
                },
                "localBlockchainHeight": {
                    "required": [
                        "quantity",
                        "unit"
                    ],
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "paths": {
        "/api/backup/import": {
            "post": {
                "summary": "Import full information about wallet from a given file.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/wallets/password/{walletId}": {
            "post": {
                "summary": "Change passphrase of given wallet.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `new` or `old`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "old",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "new",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/addresses/{address}": {
            "get": {
                "summary": "Returns True if given address is valid, False otherwise.",
                "responses": {
                    "404": {
                        "description": "`address` not found"
                    },
                    "200": {
                        "schema": {
                            "type": "boolean"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "address",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/accounts/{accountId}": {
            "get": {
                "summary": "Get information about a account by its ID",
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "delete": {
                "summary": "Delete an account by ID.",
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "put": {
                "summary": "Update account's meta information.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/redemptions/ada": {
            "post": {
                "summary": "Redeem ADA.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletRedeem"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/backup/export/{walletId}": {
            "post": {
                "summary": "Export full information about wallet to a given file",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "description": "Wallet may be later restored from this file with  endpoint above.",
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/settings/sync/progress": {
            "get": {
                "summary": "Current sync progress",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/SyncProgress"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "description": "Fetch info about local chain difficulty, network chain difficulty and connected peers.",
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/txs/fee/{from}/{to}/{amount}": {
            "post": {
                "summary": "Estimate fees for performing given transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`from` or `to` or `amount` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CCoin"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "from",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "to",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "amount",
                        "type": "integer"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InputSelectionPolicy"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "description": "Evaluate fee which would be used for transaction created with given parameters. Note that fee may change on any operation on wallet occurs. Transaction will not be actually created.",
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/wallets/new": {
            "post": {
                "summary": "Create a new wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/wallets/{walletId}": {
            "get": {
                "summary": "Returns the Wallet identified by the given walletId.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            },
            "delete": {
                "summary": "Deletes the given Wallet and all its accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "204": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            },
            "put": {
                "summary": "Update the Wallet identified by the given walletId.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WalletUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/settings/time/difference": {
            "get": {
                "summary": "Get local time difference in milliseconds.",
                "responses": {
                    "200": {
                        "schema": {
                            "maximum": 1.8446744073709551615e19,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/wallets/{walletId}": {
            "get": {
                "summary": "Get information about a wallet by its ID (address).",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "delete": {
                "summary": "Delete given wallet with all contained accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "put": {
                "summary": "Update wallet's meta information.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/info": {
            "get": {
                "summary": "Get general information about this service.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ClientInfo"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/updates": {
            "post": {
                "summary": "Applies the update. Returns info about the update being applied.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletUpdate"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Updates",
                    "V1"
                ]
            }
        },
        "/api/v0/txs/payments/{address}/{transaction}": {
            "post": {
                "summary": "Update payment transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`address` or `transaction` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "address",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "transaction",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CTxMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/test/reset": {
            "post": {
                "summary": "Clear wallet state and remove all secret key.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/backup/import": {
            "post": {
                "summary": "Import full information about wallet from a given file.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/settings/version": {
            "get": {
                "summary": "Get current version of the node.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/SoftwareVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/txs/payments/{from}/{to}/{amount}": {
            "post": {
                "summary": "Create a new payment transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`from` or `to` or `amount` not found"
                    },
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "from",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "to",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "amount",
                        "type": "integer"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InputSelectionPolicy"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/accounts": {
            "post": {
                "summary": "Create a new account in given wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "get": {
                "summary": "Get information about all available accounts.",
                "responses": {
                    "400": {
                        "description": "Invalid `accountId`"
                    },
                    "200": {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CAccount"
                            },
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/update/apply": {
            "post": {
                "summary": "Apply last update.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/info": {
            "get": {
                "summary": "Get general information about this service.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ClientInfo"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/accounts/{accountId}": {
            "get": {
                "summary": "Get information about a account by its ID",
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "delete": {
                "summary": "Delete an account by ID.",
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "put": {
                "summary": "Update account's meta information.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/wallets/{walletId}": {
            "get": {
                "summary": "Get information about a wallet by its ID (address).",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "delete": {
                "summary": "Delete given wallet with all contained accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "put": {
                "summary": "Update wallet's meta information.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/settings/time/difference": {
            "get": {
                "summary": "Get local time difference in milliseconds.",
                "responses": {
                    "200": {
                        "schema": {
                            "maximum": 1.8446744073709551615e19,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/txs/fee/{from}/{to}/{amount}": {
            "post": {
                "summary": "Estimate fees for performing given transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`from` or `to` or `amount` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CCoin"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "from",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "to",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "amount",
                        "type": "integer"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InputSelectionPolicy"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "description": "Evaluate fee which would be used for transaction created with given parameters. Note that fee may change on any operation on wallet occurs. Transaction will not be actually created.",
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/papervend/redemptions/ada": {
            "post": {
                "summary": "Redeem ADA, paper vending.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CPaperVendWalletRedeem"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/backup/export/{walletId}": {
            "post": {
                "summary": "Export full information about wallet to a given file",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "description": "Wallet may be later restored from this file with  endpoint above.",
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/settings/sync/progress": {
            "get": {
                "summary": "Current sync progress",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/SyncProgress"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "description": "Fetch info about local chain difficulty, network chain difficulty and connected peers.",
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/update": {
            "get": {
                "summary": "Get information about the next update.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CUpdateInfo"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/txs/payments/{from}/{to}/{amount}": {
            "post": {
                "summary": "Create a new payment transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`from` or `to` or `amount` not found"
                    },
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "from",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "to",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "amount",
                        "type": "integer"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InputSelectionPolicy"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/txs/histories": {
            "get": {
                "summary": "Get the history of transactions.",
                "responses": {
                    "400": {
                        "description": "Invalid `limit` or `skip` or `address` or `accountId` or `walletId`"
                    },
                    "200": {
                        "schema": {
                            "minItems": 2,
                            "items": [
                                {
                                    "items": {
                                        "$ref": "#/definitions/CTx"
                                    },
                                    "type": "array"
                                },
                                {
                                    "maximum": 1.8446744073709551615e19,
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ],
                            "maxItems": 2,
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "in": "query",
                        "name": "accountId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "address",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "in": "query",
                        "name": "skip",
                        "type": "integer"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/wallets": {
            "post": {
                "summary": "Creates a new Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewWallet"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            },
            "get": {
                "summary": "Returns all the available wallets.",
                "responses": {
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `response_format` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Wallet] (ExtendedResponse [Wallet])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 50,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **50**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "default": "plain",
                        "in": "query",
                        "name": "response_format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response format. If set to `extended`, then fetched\ndata will be wrapped in an `ExtendedResponse` (see the Models section).\nOtherwise, it defaults to \"plain\", which can as well be passed to switch to a\nsimpler response format, which includes only the requested payload.\nAn `ExtendedResponse` includes useful metadata which can be used by clients to support pagination.\n"
                    },
                    {
                        "default": "plain",
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response format. If set to `extended`, then fetched\ndata will be wrapped in an `ExtendedResponse` (see the Models section).\nOtherwise, it defaults to \"plain\", which can as well be passed to switch to a\nsimpler response format, which includes only the requested payload.\nAn `ExtendedResponse` includes useful metadata which can be used by clients to support pagination.\n"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/test/reset": {
            "post": {
                "summary": "Clear wallet state and remove all secret key.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/wallets": {
            "get": {
                "summary": "Get information about all available wallets.",
                "responses": {
                    "200": {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CWallet"
                            },
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/settings/slots/duration": {
            "get": {
                "summary": "Get blockchain slot duration in milliseconds.",
                "responses": {
                    "200": {
                        "schema": {
                            "maximum": 1.8446744073709551615e19,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/reporting/initialized": {
            "post": {
                "summary": "Send node's report on initialization time.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CInitialized"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/wallets/{walletId}/password": {
            "put": {
                "summary": "Updates the password for the given Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/wallets/keys": {
            "post": {
                "summary": "Import user's secret key from the path to generate wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/test/state": {
            "get": {
                "summary": "Print wallet state as JSON",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletStateSnapshot"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/transactions": {
            "post": {
                "summary": "Generates a new transaction from the source to one or multiple target addresses.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Transactions",
                    "V1"
                ]
            },
            "get": {
                "summary": "Returns the transaction history, i.e the list of all the past transactions.",
                "responses": {
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `response_format` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Transaction] (ExtendedResponse [Transaction])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 50,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **50**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "default": "plain",
                        "in": "query",
                        "name": "response_format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response format. If set to `extended`, then fetched\ndata will be wrapped in an `ExtendedResponse` (see the Models section).\nOtherwise, it defaults to \"plain\", which can as well be passed to switch to a\nsimpler response format, which includes only the requested payload.\nAn `ExtendedResponse` includes useful metadata which can be used by clients to support pagination.\n"
                    },
                    {
                        "default": "plain",
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response format. If set to `extended`, then fetched\ndata will be wrapped in an `ExtendedResponse` (see the Models section).\nOtherwise, it defaults to \"plain\", which can as well be passed to switch to a\nsimpler response format, which includes only the requested payload.\nAn `ExtendedResponse` includes useful metadata which can be used by clients to support pagination.\n"
                    }
                ],
                "tags": [
                    "Transactions",
                    "V1"
                ]
            }
        },
        "/api/papervend/redemptions/ada": {
            "post": {
                "summary": "Redeem ADA, paper vending.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CPaperVendWalletRedeem"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/update/postpone": {
            "post": {
                "summary": "Postpone last update.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/updates/next": {
            "get": {
                "summary": "Requests information about the next scheduled update.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletUpdate"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Updates",
                    "V1"
                ]
            }
        },
        "/api/v0/wallets/restore": {
            "post": {
                "summary": "Restore existing wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/accounts": {
            "post": {
                "summary": "Create a new account in given wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "get": {
                "summary": "Get information about all available accounts.",
                "responses": {
                    "400": {
                        "description": "Invalid `accountId`"
                    },
                    "200": {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CAccount"
                            },
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/profile": {
            "post": {
                "summary": "Update user profile.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "get": {
                "summary": "Get user profile's meta data.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/update/apply": {
            "post": {
                "summary": "Apply last update.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/transactions/fees": {
            "post": {
                "summary": "Estimate the fees which would originate from the payment.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/EstimatedFees"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Transactions",
                    "V1"
                ]
            }
        },
        "/api/reporting/initialized": {
            "post": {
                "summary": "Send node's report on initialization time.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CInitialized"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/settings/slots/duration": {
            "get": {
                "summary": "Get blockchain slot duration in milliseconds.",
                "responses": {
                    "200": {
                        "schema": {
                            "maximum": 1.8446744073709551615e19,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/wallets": {
            "get": {
                "summary": "Get information about all available wallets.",
                "responses": {
                    "200": {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CWallet"
                            },
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/txs/histories": {
            "get": {
                "summary": "Get the history of transactions.",
                "responses": {
                    "400": {
                        "description": "Invalid `limit` or `skip` or `address` or `accountId` or `walletId`"
                    },
                    "200": {
                        "schema": {
                            "minItems": 2,
                            "items": [
                                {
                                    "items": {
                                        "$ref": "#/definitions/CTx"
                                    },
                                    "type": "array"
                                },
                                {
                                    "maximum": 1.8446744073709551615e19,
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ],
                            "maxItems": 2,
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "in": "query",
                        "name": "accountId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "address",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "in": "query",
                        "name": "skip",
                        "type": "integer"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/node-settings": {
            "get": {
                "summary": "Retrieves the static settings for this node.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/NodeSettings"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Settings",
                    "V1"
                ]
            }
        },
        "/api/v1/addresses": {
            "post": {
                "summary": "Creates a new Address.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Address"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Address"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Addresses",
                    "V1"
                ]
            },
            "get": {
                "summary": "Returns all the addresses.",
                "responses": {
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `response_format` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Address] (ExtendedResponse [Address])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 50,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **50**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "default": "plain",
                        "in": "query",
                        "name": "response_format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response format. If set to `extended`, then fetched\ndata will be wrapped in an `ExtendedResponse` (see the Models section).\nOtherwise, it defaults to \"plain\", which can as well be passed to switch to a\nsimpler response format, which includes only the requested payload.\nAn `ExtendedResponse` includes useful metadata which can be used by clients to support pagination.\n"
                    },
                    {
                        "default": "plain",
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response format. If set to `extended`, then fetched\ndata will be wrapped in an `ExtendedResponse` (see the Models section).\nOtherwise, it defaults to \"plain\", which can as well be passed to switch to a\nsimpler response format, which includes only the requested payload.\nAn `ExtendedResponse` includes useful metadata which can be used by clients to support pagination.\n"
                    }
                ],
                "tags": [
                    "Addresses",
                    "V1"
                ]
            }
        },
        "/api/v0/update": {
            "get": {
                "summary": "Get information about the next update.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CUpdateInfo"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/addresses": {
            "post": {
                "summary": "Create a new address in given account.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAddress"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountId"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/update/postpone": {
            "post": {
                "summary": "Postpone last update.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/wallets/restore": {
            "post": {
                "summary": "Restore existing wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/node-info": {
            "get": {
                "summary": "Retrieves the dynamic information for this node.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/NodeInfo"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Info",
                    "V1"
                ]
            }
        },
        "/api/profile": {
            "post": {
                "summary": "Update user profile.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            },
            "get": {
                "summary": "Get user profile's meta data.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/txs/payments/{address}/{transaction}": {
            "post": {
                "summary": "Update payment transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`address` or `transaction` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "address",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "transaction",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CTxMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/wallets/keys": {
            "post": {
                "summary": "Import user's secret key from the path to generate wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/wallets/new": {
            "post": {
                "summary": "Create a new wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/wallets/password/{walletId}": {
            "post": {
                "summary": "Change passphrase of given wallet.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `new` or `old`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "old",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "new",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/addresses/{address}": {
            "get": {
                "summary": "Returns True if given address is valid, False otherwise.",
                "responses": {
                    "404": {
                        "description": "`address` not found"
                    },
                    "200": {
                        "schema": {
                            "type": "boolean"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "address",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/test/state": {
            "get": {
                "summary": "Print wallet state as JSON",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletStateSnapshot"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/redemptions/ada": {
            "post": {
                "summary": "Redeem ADA.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletRedeem"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/addresses": {
            "post": {
                "summary": "Create a new address in given account.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAddress"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountId"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/settings/version": {
            "get": {
                "summary": "Get current version of the node.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/SoftwareVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        }
    }
}